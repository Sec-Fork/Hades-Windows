// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hades_win.proto

#include "hades_win.pb.h"
#include "hades_win.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc {

static const char* Transfer_method_names[] = {
  "/grpc.Transfer/Transfer",
};

std::unique_ptr< Transfer::Stub> Transfer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Transfer::Stub> stub(new Transfer::Stub(channel, options));
  return stub;
}

Transfer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Transfer_(Transfer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::grpc::RawData, ::grpc::Command>* Transfer::Stub::TransferRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::grpc::RawData, ::grpc::Command>::Create(channel_.get(), rpcmethod_Transfer_, context);
}

void Transfer::Stub::async::Transfer(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::grpc::RawData,::grpc::Command>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::grpc::RawData,::grpc::Command>::Create(stub_->channel_.get(), stub_->rpcmethod_Transfer_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::grpc::RawData, ::grpc::Command>* Transfer::Stub::AsyncTransferRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc::RawData, ::grpc::Command>::Create(channel_.get(), cq, rpcmethod_Transfer_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpc::RawData, ::grpc::Command>* Transfer::Stub::PrepareAsyncTransferRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc::RawData, ::grpc::Command>::Create(channel_.get(), cq, rpcmethod_Transfer_, context, false, nullptr);
}

Transfer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Transfer_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Transfer::Service, ::grpc::RawData, ::grpc::Command>(
          [](Transfer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::grpc::Command,
             ::grpc::RawData>* stream) {
               return service->Transfer(ctx, stream);
             }, this)));
}

Transfer::Service::~Service() {
}

::grpc::Status Transfer::Service::Transfer(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc::Command, ::grpc::RawData>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc

